(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("LightItUpEngine", [], factory);
	else if(typeof exports === 'object')
		exports["LightItUpEngine"] = factory();
	else
		root["LightItUpEngine"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 25);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Represents a Color
 */
var Color = /** @class */ (function () {
    /**
     * @param {number} R Red value    (0 -> 255)
     * @param {number} G Green value  (0 -> 255)
     * @param {number} B Blue value   (0 -> 255)
     */
    function Color(R, G, B) {
        this.R = 0;
        this.G = 0;
        this.B = 0;
        this.R = Color._safeLimit(R);
        this.G = Color._safeLimit(G);
        this.B = Color._safeLimit(B);
    }
    /**
     * Safely limit color part between 0 and 255, forcing it to be an integer
     * @param {number} x
     * @returns {number}
     * @private
     */
    Color._safeLimit = function (x) {
        return (isNaN(x) || null == x) ? 0 : Math.max(0, Math.min(Math.floor(x), 255));
    };
    /**
     * Clone current Color
     * @param {Color} color
     * @returns {Color}
     */
    Color.clone = function (color) {
        return new Color(color.R, color.G, color.B);
    };
    /**
     * Converts an Color to its HSL representation
     * @param   {Color}  color       The Color value
     * @return  {HSL}                The HSL representation
     */
    Color.toHSL = function (color) {
        var r = (color.R / 255), g = (color.G / 255), b = (color.B / 255);
        var max = Math.max(r, g, b), min = Math.min(r, g, b);
        var l = (max + min) / 2;
        var h = NaN;
        var s = NaN;
        if (max === min) {
            h = s = 0; // achromatic
        }
        else {
            var d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            switch (max) {
                case r:
                    h = (g - b) / d + (g < b ? 6 : 0);
                    break;
                case g:
                    h = (b - r) / d + 2;
                    break;
                case b:
                    h = (r - g) / d + 4;
                    break;
            }
            h /= 6;
        }
        return { H: h, S: s, L: l };
    };
    /**
     * Converts an HSL color to its RGB Color representation
     * @param   {HSL}  hsl        The HSL object
     * @return  {Color}           The RGB representation
     */
    Color.fromHSL = function (hsl) {
        var h = hsl.H, s = hsl.S, l = hsl.L;
        var r, g, b;
        if (s === 0) {
            r = g = b = l; // achromatic
        }
        else {
            var hue2rgb = function (p, q, t) {
                if (t < 0) {
                    t += 1;
                }
                if (t > 1) {
                    t -= 1;
                }
                if (t < 1 / 6) {
                    return p + (q - p) * 6 * t;
                }
                if (t < 1 / 2) {
                    return q;
                }
                if (t < 2 / 3) {
                    return p + (q - p) * (2 / 3 - t) * 6;
                }
                return p;
            };
            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            var p = 2 * l - q;
            r = hue2rgb(p, q, h + 1 / 3);
            g = hue2rgb(p, q, h);
            b = hue2rgb(p, q, h - 1 / 3);
        }
        return new Color(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255));
    };
    /**
     * Get RBG color string eg: rgb(100, 200, 100)
     * @returns {string}
     */
    Color.prototype.toString = function () {
        return 'rgb(' + this.R + ', ' + this.G + ', ' + this.B + ')';
    };
    Color.Off = new Color(0, 0, 0); // => Switched OFF LED state
    Color.Blue = new Color(0, 0, 255);
    Color.Red = new Color(255, 0, 0);
    Color.Green = new Color(0, 255, 0);
    Color.Yellow = new Color(255, 255, 0);
    Color.Pink = new Color(255, 0, 255);
    Color.Purple = new Color(138, 43, 226);
    Color.Orange = new Color(255, 150, 50);
    return Color;
}());
/* harmony default export */ __webpack_exports__["a"] = (Color);


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EffectBase__ = __webpack_require__(2);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Abstract interface to manage effects depending on a step time
 */

var StepTimeAbstract = /** @class */ (function (_super) {
    __extends(StepTimeAbstract, _super);
    function StepTimeAbstract() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.lastStep = NaN;
        _this.lastStepTime = NaN;
        _this.stepTime = NaN;
        _this.initTime = new Date().getTime();
        _this._firstStepChange = true;
        return _this;
    }
    /**
     * Set the last step back to NaN
     * @param time Passed as arg for optimization purpose
     */
    StepTimeAbstract.prototype.resetStep = function (time) {
        if (time === void 0) { time = null; }
        this.lastStep = NaN;
        this.initTime = time || new Date().getTime();
    };
    /**
     * Check if current time is another step
     * @param time Passed as arg for optimization purpose
     */
    StepTimeAbstract.prototype.stepCheck = function (time) {
        if (time === void 0) { time = null; }
        if (this.stepTime > 0) {
            var now = time || new Date().getTime();
            var currentStep = Math.floor((now - this.initTime) / this.stepTime);
            if (isNaN(this.lastStep) || this.lastStep != currentStep) {
                var delta = isNaN(this.lastStep) ? 1 : (this.lastStep - currentStep);
                this.onStepChange(currentStep, delta, this._firstStepChange);
                this.lastStep = currentStep;
                this.lastStepTime = now;
                this._firstStepChange = false;
                return true;
            }
            return false;
        }
        return false;
    };
    return StepTimeAbstract;
}(__WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (StepTimeAbstract);


/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EffectsUtils__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Point__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Color__ = __webpack_require__(0);



/**
 * Effect base class
 */
var EffectBase = /** @class */ (function () {
    function EffectBase() {
        this.initialized = false; // True if effect has been initialized
    }
    /**
     * Morph color A to color B by a factor equal to percent
     * @param {Color} colorA
     * @param {Color} colorB
     * @param {number} percent
     * @returns {Color}
     */
    EffectBase.smooth = function (colorA, colorB, percent) {
        var Ra = colorA.R;
        var Ga = colorA.G;
        var Ba = colorA.B;
        var Rb = colorB.R;
        var Gb = colorB.G;
        var Bb = colorB.B;
        var currentColor = new __WEBPACK_IMPORTED_MODULE_2__Color__["a" /* default */](0, 0, 0);
        currentColor.R = __WEBPACK_IMPORTED_MODULE_2__Color__["a" /* default */]._safeLimit(Ra + (Rb - Ra) * percent);
        currentColor.G = __WEBPACK_IMPORTED_MODULE_2__Color__["a" /* default */]._safeLimit(Ga + (Gb - Ga) * percent);
        currentColor.B = __WEBPACK_IMPORTED_MODULE_2__Color__["a" /* default */]._safeLimit(Ba + (Bb - Ba) * percent);
        return currentColor;
    };
    /**
     * Reset the effect
     */
    EffectBase.prototype.forceReinitialize = function () {
        this.initialized = false;
    };
    /**
     * Return the effect easing function
     * @param {string | Array<number>} easingOpt
     * @returns {Function}
     */
    EffectBase.prototype.getEasingFn = function (easingOpt) {
        var easing = easingOpt || 'linear';
        var fn = null;
        if (null != easing) {
            switch (Array.isArray(easing)) {
                case true:// Bezier points
                    var p1_1 = new __WEBPACK_IMPORTED_MODULE_1__Point__["a" /* default */](easing[0], easing[1]);
                    var p2_1 = new __WEBPACK_IMPORTED_MODULE_1__Point__["a" /* default */](easing[2], easing[3]);
                    fn = function (t) {
                        return __WEBPACK_IMPORTED_MODULE_0__EffectsUtils__["a" /* default */].Easing.cubicBezier(p1_1, p2_1, t);
                    };
                    break;
                case false:// Easing function name
                    fn = function (t) {
                        return __WEBPACK_IMPORTED_MODULE_0__EffectsUtils__["a" /* default */].Easing[easing](t);
                    };
                    break;
            }
        }
        return fn;
    };
    /**
     * Set the effect easing function
     * @param {string | Array<number>} easingOpt If it's an array, will be interpreted as a Bezier
     * control points array [x1, y1, x2, y2], else it must be a string referring to the an easing function name
     * as defined inside EffectUtils class
     */
    EffectBase.prototype.setEasingFn = function (easingOpt) {
        this.easingFn = this.getEasingFn(easingOpt);
    };
    /**
     * Adjust the computed state regarding to the easing function
     * @param {number} percentValue
     * @param useFn
     * @returns {number}
     */
    EffectBase.prototype.ease = function (percentValue, useFn) {
        if (useFn === void 0) { useFn = null; }
        return ((null != useFn) ? this.getEasingFn(useFn) : this.easingFn)(percentValue);
    };
    /**
     * Compute the current progress state of the effect
     * @param {number} animationStartedTime
     * @param {number} animationTime
     * @param {number} currentTime
     * @param useEaseFn
     * @returns {number}
     */
    EffectBase.prototype.percentState = function (animationStartedTime, animationTime, currentTime, useEaseFn) {
        if (useEaseFn === void 0) { useEaseFn = null; }
        return this.ease(((currentTime - animationStartedTime) % animationTime)
            / (animationTime), useEaseFn);
    };
    return EffectBase;
}());
/* harmony default export */ __webpack_exports__["a"] = (EffectBase);


/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__effects_BreathEffect__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__effects_SimpleColorEffect__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__effects_StepperEffect__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__effects_RainbowEffect__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__effects_StackEffect__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__effects_TrailsEffect__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__effects_ExplodeEffect__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__effects_RandomColorEffect__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__effects_ShineEffect__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__effects_CandleEffect__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__effects_AudioEffect__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__effects_BouncingBallEffect__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__effects_KnightRiderEffect__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__effects_TwinkleEffect__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__effects_SparkleEffect__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__effects_MovingWavesEffect__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__effects_ColorWipeEffect__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__effects_TheaterChaseEffect__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__effects_FireEffect__ = __webpack_require__(22);



















var effects = {};
effects[__WEBPACK_IMPORTED_MODULE_0__effects_BreathEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_0__effects_BreathEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_1__effects_SimpleColorEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_1__effects_SimpleColorEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_7__effects_RandomColorEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_7__effects_RandomColorEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_2__effects_StepperEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_2__effects_StepperEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_3__effects_RainbowEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_3__effects_RainbowEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_4__effects_StackEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_4__effects_StackEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_5__effects_TrailsEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_5__effects_TrailsEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_6__effects_ExplodeEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_6__effects_ExplodeEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_8__effects_ShineEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_8__effects_ShineEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_9__effects_CandleEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_9__effects_CandleEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_10__effects_AudioEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_10__effects_AudioEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_11__effects_BouncingBallEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_11__effects_BouncingBallEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_12__effects_KnightRiderEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_12__effects_KnightRiderEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_13__effects_TwinkleEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_13__effects_TwinkleEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_14__effects_SparkleEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_14__effects_SparkleEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_15__effects_MovingWavesEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_15__effects_MovingWavesEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_16__effects_ColorWipeEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_16__effects_ColorWipeEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_17__effects_TheaterChaseEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_17__effects_TheaterChaseEffect__["a" /* default */];
effects[__WEBPACK_IMPORTED_MODULE_18__effects_FireEffect__["a" /* default */]._name] = __WEBPACK_IMPORTED_MODULE_18__effects_FireEffect__["a" /* default */];
/**
 * Effects handler class
 */
var EffectController = /** @class */ (function () {
    function EffectController() {
    }
    /**
     * Apply an effect to the LEDs set
     * @param {Array<LED>} LEDs
     * @param {EffectConfig} effect
     * @param {number} animationStartedTime
     * @param {number} animationTime
     * @param {number} currentTime
     */
    EffectController.applyEffect = function (LEDs, effect, animationStartedTime, animationTime, currentTime) {
        if (null == effect.instance) {
            effect.instance = new effects[effect.name]();
        }
        return (effect.instance.process)(effect.options, LEDs, animationStartedTime, animationTime, currentTime);
    };
    return EffectController;
}());
/* harmony default export */ __webpack_exports__["a"] = (EffectController);


/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Color__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_StepTimeAbstract__ = __webpack_require__(1);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Simulates a Breath inspiration/expiration
 */
var BreathEffect = /** @class */ (function (_super) {
    __extends(BreathEffect, _super);
    function BreathEffect() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BreathEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        var _this = this;
        if (!this.initialized) {
            this.setEasingFn(options.easing);
            this.initialized = true;
            // Base color
            this.baseColor = __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */].toHSL(new __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */](options.basecolor[0], options.basecolor[1], options.basecolor[2]));
            this.currentColor = __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */].toHSL(new __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */](options.basecolor[0], options.basecolor[1], options.basecolor[2]));
            // How much percentage of the animation should the inspiration part take
            this.inspirationRatio = 0.01 * options.inspiration_ratio || 0.5;
            this.stepTime = options.stepTime;
            this.resetStep();
        }
        var now = new Date().getTime();
        this.stepCheck(now);
        var step = ((now - this.lastStepTime) / this.stepTime) % 1;
        if (step > this.inspirationRatio) {
            var val = this.percentState(this.lastStepTime + this.inspirationRatio * this.stepTime, (1 - this.inspirationRatio) * this.stepTime, now);
            this.currentColor.L = this.baseColor.L * (1 - val);
        }
        else {
            var val = this.percentState(this.lastStepTime, this.inspirationRatio * this.stepTime, now);
            this.currentColor.L = this.baseColor.L * val;
        }
        leds.forEach(function (led) {
            led.color = __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */].clone(__WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */].fromHSL(_this.currentColor));
        });
    };
    BreathEffect.prototype.onStepChange = function (currentStep, delta) {
    };
    BreathEffect._name = 'breath';
    return BreathEffect;
}(__WEBPACK_IMPORTED_MODULE_1__utils_StepTimeAbstract__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (BreathEffect);


/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EffectBase__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Color__ = __webpack_require__(0);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Apply a simple color to all LEDs
 */
var SimpleColorEffect = /** @class */ (function (_super) {
    __extends(SimpleColorEffect, _super);
    function SimpleColorEffect() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SimpleColorEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        var color = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](options.color[0], options.color[1], options.color[2]);
        leds.forEach(function (led) {
            led.color = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].clone(color);
        });
    };
    SimpleColorEffect._name = 'simple-color';
    return SimpleColorEffect;
}(__WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (SimpleColorEffect);


/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EffectBase__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Color__ = __webpack_require__(0);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * States effect
 * Navigates from a state (Color) to the next one by the specified time, smoothly or not
 */
var StepperEffect = /** @class */ (function (_super) {
    __extends(StepperEffect, _super);
    function StepperEffect() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StepperEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        if (!this.initialized) {
            var step_1 = options.steps[0];
            leds.forEach(function (led) {
                led.color = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](step_1[1], step_1[2], step_1[3]);
            });
            this.initialized = true;
        }
        if (options.steps.length === 1) {
            var step_2 = options.steps[0];
            leds.forEach(function (led) {
                led.color = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](step_2[1], step_2[2], step_2[3]);
            });
            return;
        }
        else if (!options.smooth) {
            leds.forEach(function (led) {
                var currentPeriodTime = (currentTime - animationStartedTime) % animationTime;
                options.steps.forEach(function (step, index) {
                    if (currentPeriodTime >= step[0]
                        && (index === options.steps.length - 1 || step[0] < options.steps[index + 1][0])) {
                        led.color = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](step[1], step[2], step[3]);
                        return;
                    }
                });
            });
        }
        else {
            var currentPeriodTime_1 = (currentTime - animationStartedTime) % animationTime;
            var currentStepIndex_1 = NaN;
            options.steps.forEach(function (step, index) {
                if (currentPeriodTime_1 >= step[0]
                    && (index === options.steps.length - 1 || step[0] < options.steps[index + 1][0])) {
                    currentStepIndex_1 = index;
                    return;
                }
            });
            var currentStep = options.steps[currentStepIndex_1];
            var baseColor = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](currentStep[1], currentStep[2], currentStep[3]);
            var nextStep = options.steps[(currentStepIndex_1 + 1) % (options.steps.length)];
            var nextColor = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](nextStep[1], nextStep[2], nextStep[3]);
            var timeToReach = NaN;
            if (currentStepIndex_1 === options.steps.length - 1) {
                timeToReach = (animationTime - currentStep[0]);
            }
            else {
                timeToReach = (nextStep[0] - currentStep[0]);
            }
            var stepStartedTime = currentStep[0];
            var currentTimeRelative = ((currentTime - animationStartedTime) % (animationTime));
            var percent = this.percentState(stepStartedTime, timeToReach, currentTimeRelative, currentStep[4] || 'linear');
            var currentColor_1 = __WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */].smooth(baseColor, nextColor, percent);
            leds.forEach(function (led) {
                led.color = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].clone(currentColor_1);
            });
        }
    };
    StepperEffect._name = 'stepper';
    return StepperEffect;
}(__WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (StepperEffect);


/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Color__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_StepTimeAbstract__ = __webpack_require__(1);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Animated or static Rainbow Effect
 */
var RainbowEffect = /** @class */ (function (_super) {
    __extends(RainbowEffect, _super);
    function RainbowEffect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.animated = true;
        _this.offsetAngle = 0;
        _this.angleCover = 360;
        _this.setAll = false;
        return _this;
    }
    RainbowEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        var _this = this;
        if (!this.initialized) {
            this.setEasingFn(options.easing);
            this.stepTime = options.stepTime;
            this.resetStep();
            this.setAll = options.setAll;
            this.animated = options.animated;
            this.offsetAngle = options.offsetAngle;
            this.angleCover = options.angleCover;
            this.initialized = true;
        }
        var now = new Date().getTime();
        this.stepCheck(now);
        var angle = NaN;
        var len = leds.length;
        var phaseJump = (null != this.angleCover) ? this.angleCover / len : 360 / len;
        leds.forEach(function (led) {
            if (_this.animated) {
                angle = (Math.ceil(360 * _this.percentState(_this.lastStepTime, _this.stepTime, now))
                    + (_this.offsetAngle || 0)) % 360;
                led.color = __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */].fromHSL({
                    H: Math.ceil((angle + Math.floor(_this.setAll ? 0 : led.id * phaseJump)) % 360) / 360,
                    S: 1,
                    L: 0.6
                });
            }
            else {
                angle = (_this.offsetAngle || 0) % 360;
                led.color = __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */].fromHSL({
                    H: (angle + Math.floor(led.id * phaseJump)) / 360,
                    S: 1,
                    L: 0.6
                });
            }
        });
    };
    RainbowEffect.prototype.onStepChange = function (currentStep, delta) {
    };
    RainbowEffect._name = 'rainbow';
    return RainbowEffect;
}(__WEBPACK_IMPORTED_MODULE_1__utils_StepTimeAbstract__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (RainbowEffect);


/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Color__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_StepTimeAbstract__ = __webpack_require__(1);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Stack LEDs one by one
 */
var StackEffect = /** @class */ (function (_super) {
    __extends(StackEffect, _super);
    function StackEffect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.stepsCount = NaN;
        return _this;
    }
    StackEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        var _this = this;
        var LEDSCount = leds.length;
        if (!this.initialized) {
            this.stackedColor = new __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */](options.enabledColor[0], options.enabledColor[1], options.enabledColor[2]);
            this.notStackedColor = new __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */](options.disabledColor[0], options.disabledColor[1], options.disabledColor[2]);
            this.stepTime = options.stepTime;
            this.resetStep();
            this.setEasingFn(options.easing);
            leds.forEach(function (led) {
                led.color = _this.notStackedColor;
            });
            if (!options.sameTourTime) {
                this.stepsCount = 0;
                for (var i = LEDSCount; i > 0; i--) {
                    this.stepsCount += i;
                }
            }
            this.initialized = true;
        }
        var now = new Date().getTime();
        this.stepCheck(now);
        var enabledLEDS = NaN, currentLed = NaN;
        var currentSate = this.percentState(this.lastStepTime, this.stepTime, now);
        var currentStateLEDS = (LEDSCount * currentSate);
        if (options.sameTourTime) {
            enabledLEDS = Math.floor(currentStateLEDS);
            currentLed = Math.floor((LEDSCount - enabledLEDS) * (currentStateLEDS - enabledLEDS));
        }
        else {
            /*
            * *1.05 means we take a 5% security to ensure effect will run until all LEDs are enabled
            * Indeed, it can occur that refresh frequency is a way that prevent the script to reach the '1' percentState
            */
            var currentStep = Math.ceil(this.stepsCount * 1.05 * currentSate);
            var tmp = 0;
            enabledLEDS = 0;
            for (var i = LEDSCount; i >= 0; i--) {
                if (currentStep > i + tmp) {
                    enabledLEDS++;
                    tmp += i;
                }
                else {
                    currentLed = currentStep - tmp - 1;
                    break;
                }
            }
        }
        if (options.direction === 'reverse') {
            leds.forEach(function (led) {
                if (led.id < enabledLEDS) {
                    led.color = _this.stackedColor;
                }
                else if (led.id === LEDSCount - currentLed) {
                    led.color = _this.stackedColor;
                }
                else {
                    led.color = _this.notStackedColor;
                }
            });
        }
        else {
            leds.forEach(function (led) {
                if (led.id >= LEDSCount - enabledLEDS) {
                    led.color = _this.stackedColor;
                }
                else if (led.id === currentLed) {
                    led.color = _this.stackedColor;
                }
                else {
                    led.color = _this.notStackedColor;
                }
            });
        }
    };
    StackEffect.prototype.onStepChange = function (currentStep, delta) {
    };
    StackEffect._name = 'stack';
    return StackEffect;
}(__WEBPACK_IMPORTED_MODULE_1__utils_StepTimeAbstract__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (StackEffect);


/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EffectBase__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Color__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_StepTimeAbstract__ = __webpack_require__(1);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



/**
 * Simulate trails
 */
var TrailsEffect = /** @class */ (function (_super) {
    __extends(TrailsEffect, _super);
    function TrailsEffect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.frequency = NaN; // Trails frequency
        _this.attenuation = NaN; // Light attenuation percent depending on the distance to leading head
        _this.baseLuminosity = NaN; // Trails color luminosity
        _this.head = 0; // Leading LED position
        _this.firstCycleAchieved = false; // Has the first cycle done
        _this.lastPercent = NaN; // Needed to set the firstCycleAchieved
        _this.maxTrailLength = 0;
        _this.reverse = false;
        return _this;
    }
    TrailsEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        var _this = this;
        if (!this.initialized) {
            if (options.attenuation) {
                var minAttenuation = 100 / leds.length, maxAttenuation = 100;
                this.attenuation = 0.01 * Math.max(minAttenuation, Math.min(maxAttenuation, options.attenuation));
            }
            this.stepTime = options.stepTime || 2000;
            this.resetStep();
            this.frequency = Math.max(1, options.frequency || 0);
            if (options.adjustFrequency) {
                while (this.frequency > 0
                    && Math.round(leds.length / this.frequency) !== leds.length / this.frequency) {
                    this.frequency--;
                }
                if (leds.length / this.frequency !== Math.round(leds.length / this.frequency)) {
                    this.frequency = 0;
                }
            }
            this.maxTrailLength = options.maxTrailLength;
            this.baseColor = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](options.baseColor[0], options.baseColor[1], options.baseColor[2]);
            this.trailsColor = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](options.trailsColor[0], options.trailsColor[1], options.trailsColor[2]);
            this.setEasingFn(options.easing);
            this.reverse = options.direction === 'reverse';
            this.initialized = true;
        }
        var now = new Date().getTime();
        this.stepCheck(now);
        var percent = this.percentState(this.lastStepTime, this.stepTime, now);
        if (!this.firstCycleAchieved && !isNaN(this.lastPercent) && this.lastPercent > percent) {
            this.firstCycleAchieved = true;
        }
        else {
            this.lastPercent = percent;
        }
        this.head = Math.round(percent * (leds.length - 1)) % this.frequency;
        leds.forEach(function (led, index) {
            var distance = (index <= _this.head) ? index + (_this.frequency - _this.head) : (index - _this.head) % (_this.frequency);
            if (_this.reverse) {
                distance = _this.frequency - distance;
            }
            if ((_this.reverse ? distance : _this.frequency - distance) >= options.maxTrailLength) {
                leds[_this.reverse ? leds.length - 1 - index : index].color = _this.baseColor;
            }
            else {
                leds[_this.reverse ? leds.length - 1 - index : index].color = __WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */].smooth(_this.baseColor, _this.trailsColor, Math.max(0, _this.reverse ? 1 - Math.abs(distance) * _this.attenuation
                    : 1 - (_this.frequency - Math.abs(distance)) * _this.attenuation));
            }
        });
    };
    TrailsEffect.prototype.onStepChange = function (currentStep, delta) {
    };
    TrailsEffect._name = 'trails';
    return TrailsEffect;
}(__WEBPACK_IMPORTED_MODULE_2__utils_StepTimeAbstract__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (TrailsEffect);


/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Color__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_StepTimeAbstract__ = __webpack_require__(1);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Simulates an explosion (fusing particles)
 */
var ExplodeEffect = /** @class */ (function (_super) {
    __extends(ExplodeEffect, _super);
    function ExplodeEffect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.baseLuminosity = NaN; // Particles color base luminosity
        _this.stepsCount = NaN; // Steps count needed to achieve the whole animation
        _this.stepTime = NaN; // Time between each step
        _this.currentSubStep = NaN; // Current Sub step
        _this.attenuation = NaN; // How much attenuating luminosity depending on the distance to the middle LED
        _this.maxTrailLength = NaN; // Cut the trail after X LEDs
        return _this;
    }
    ExplodeEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        var _this = this;
        if (!this.initialized) {
            this.middle = ((leds.length % 2) !== 0) ? [(leds.length - 1) / 2] : [leds.length / 2 - 1, leds.length / 2];
            this.stepsCount = Math.ceil(ExplodeEffect.stepPrecision * options.lifetime / animationTime);
            this.stepTime = options.stepTime;
            this.resetStep();
            this.attenuation = 0.01 * options.attenuation || 0.12;
            this.maxTrailLength = options.maxTrailLength || 8;
            this.setEasingFn(options.easing);
            this.baseColor = new __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */](options.baseColor[0], options.baseColor[1], options.baseColor[2]);
            this.baseLuminosity = __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */].toHSL(this.baseColor).L;
            this.initialized = true;
        }
        var now = new Date().getTime();
        this.stepCheck(now);
        this.currentSubStep = Math.floor(ExplodeEffect.stepPrecision *
            ((now - this.lastStepTime) % this.stepTime) / this.stepTime);
        var distance = Math.floor((this.currentSubStep / ExplodeEffect.stepPrecision)
            * (leds.length - 1 - (this.middle[1] || this.middle[0])));
        var id1 = Math.max(0, this.middle[0] - distance);
        var id2 = Math.min(leds.length - 1, (this.middle[1] || this.middle[0]) + distance);
        var iterationLuminosity = Math.max(0, this.baseLuminosity * (1 - this.currentSubStep / this.stepsCount));
        iterationLuminosity = iterationLuminosity * (1 - Math.sin(Math.PI / 2 * this.currentSubStep / options.lifetime));
        leds.forEach(function (led, index) {
            var luminosity = 0;
            if (index === id1 || index === id2) {
                luminosity = iterationLuminosity;
            }
            else if (index < id2 && index > id1) {
                var dist = NaN;
                if (index < id2 && id2 - index < index - id1) {
                    dist = id2 - index;
                }
                else {
                    dist = index - id1;
                }
                if (dist > 0 && dist < _this.maxTrailLength) {
                    luminosity = Math.max(0, iterationLuminosity * (1 - dist * _this.attenuation));
                }
                else {
                    luminosity = 0;
                }
            }
            var color = __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */].toHSL(_this.baseColor);
            color.L = luminosity;
            led.color = __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */].fromHSL(color);
        });
    };
    ExplodeEffect.prototype.onStepChange = function (currentStep, delta) {
    };
    ExplodeEffect._name = 'explode';
    ExplodeEffect.stepPrecision = 1000; // 1000 to make visible when lifetime is far away from animation duration
    return ExplodeEffect;
}(__WEBPACK_IMPORTED_MODULE_1__utils_StepTimeAbstract__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (ExplodeEffect);


/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EffectBase__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Color__ = __webpack_require__(0);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Randomly apply a Color to the LEDs (all the same or all different) for a certain time
 */
var RandomColorEffect = /** @class */ (function (_super) {
    __extends(RandomColorEffect, _super);
    function RandomColorEffect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.lastChangeTime = NaN;
        _this.nextColorsArray = [];
        _this.currentBaseColorsArray = [];
        return _this;
    }
    RandomColorEffect.getBrightColor = function () {
        var rgb = [];
        rgb[0] = Math.random() * 256; // red
        rgb[1] = Math.random() * 256; // green
        rgb[2] = Math.random() * 256; // blue
        var max = NaN, min = NaN, notmax = NaN;
        if (rgb[0] > rgb[1]) {
            max = (rgb[0] > rgb[2]) ? 0 : 2;
            min = (rgb[1] < rgb[2]) ? 1 : 2;
        }
        else {
            max = (rgb[1] > rgb[2]) ? 1 : 2;
            notmax = 1 + max % 2;
            min = (rgb[0] < rgb[notmax]) ? 0 : notmax;
        }
        rgb[max] = 255;
        rgb[min] = 0;
        rgb.forEach(function (val, index) {
            rgb[index] = Math.floor(rgb[index]);
        });
        return new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](rgb[0], rgb[1], rgb[2]);
    };
    RandomColorEffect.getRandomColor = function (bright) {
        if (bright === void 0) { bright = true; }
        if (bright) {
            return RandomColorEffect.getBrightColor();
        }
        else {
            var r = Math.floor(Math.random() * 255) + 1;
            var g = Math.floor(Math.random() * 255) + 1;
            var b = Math.floor(Math.random() * 255) + 1;
            return new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](r, g, b);
        }
    };
    RandomColorEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        var _this = this;
        if (!this.initialized) {
            this.setEasingFn(options.easing);
            this.currentBaseColor = RandomColorEffect.getRandomColor(options.bright ? options.bright : true);
            if (options.byled) {
                leds.forEach(function (led) {
                    var base = RandomColorEffect.getRandomColor(options.bright ? options.bright : true);
                    _this.currentBaseColorsArray.push(base);
                    led.color = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].clone(base);
                    _this.nextColorsArray.push(RandomColorEffect.getRandomColor(options.bright ? options.bright : true));
                });
            }
            else {
                this.nextColor = RandomColorEffect.getRandomColor(options.bright ? options.bright : true);
                leds.forEach(function (led) {
                    led.color = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].clone(_this.currentBaseColor);
                });
            }
            this.initialized = true;
            return;
        }
        var setColor;
        if (options.smooth) {
            // Changing step
            if (isNaN(this.lastChangeTime) || this.lastChangeTime > currentTime
                || currentTime - this.lastChangeTime > options.stepTime) {
                if (!options.byled) {
                    if (null != this.nextColor) {
                        this.currentBaseColor = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].clone(this.nextColor);
                    }
                    this.nextColor = RandomColorEffect.getRandomColor(options.bright ? options.bright : true);
                }
                else {
                    for (var i = 0; i < leds.length; i++) {
                        this.currentBaseColorsArray[i] = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].clone(this.nextColorsArray[i]);
                        this.nextColorsArray[i] = RandomColorEffect.getRandomColor(options.bright ? options.bright : true);
                    }
                }
                this.lastChangeTime = currentTime;
            }
            var percent_1 = this.percentState(this.lastChangeTime, options.stepTime, currentTime);
            if (!options.byled) {
                var currentColor = __WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */].smooth(this.currentBaseColor, this.nextColor, percent_1);
                setColor = currentColor;
            }
            else {
                leds.forEach(function (led) {
                    var currentColor = __WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */].smooth(_this.currentBaseColorsArray[led.id], _this.nextColorsArray[led.id], percent_1);
                    led.color = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].clone(currentColor);
                });
            }
        }
        else if (this.lastChangeTime > currentTime || isNaN(this.lastChangeTime)
            || currentTime - this.lastChangeTime > options.stepTime) {
            if (!options.byled) {
                setColor = RandomColorEffect.getRandomColor(options.bright ? options.bright : true);
            }
            else {
                leds.forEach(function (led) {
                    led.color = RandomColorEffect.getRandomColor(options.bright ? options.bright : true);
                });
            }
            this.lastChangeTime = currentTime;
        }
        else {
            return;
        }
        if (!options.byled) {
            leds.forEach(function (led) {
                led.color = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].clone(setColor);
            });
        }
    };
    RandomColorEffect._name = 'random-color';
    return RandomColorEffect;
}(__WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (RandomColorEffect);


/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EffectBase__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Color__ = __webpack_require__(0);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Randomly set LEDs luminosity to make it shine
 */
var ShineEffect = /** @class */ (function (_super) {
    __extends(ShineEffect, _super);
    function ShineEffect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.colors = [];
        _this.lastStep = NaN;
        return _this;
    }
    ShineEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        var _this = this;
        if (!this.initialized) {
            this.colors = [];
            this.colors.push(new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](options.baseColor[0], options.baseColor[1], options.baseColor[2]));
            // lightVariationPercent refers to the maximum brightness percent change from the base color
            var lightVariation = Math.min(options.lightVariationPercent, 100);
            var color2_HSLA = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].toHSL(this.colors[0]);
            // color2_HSLA.H = (color2_HSLA.H+lightVariation/360)%360;
            color2_HSLA.L = Math.max(0, Math.min(1, (color2_HSLA.L + lightVariation / 100)));
            this.colors.push(__WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].fromHSL(color2_HSLA));
            var color3_HSLA = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].toHSL(this.colors[0]);
            // color3_HSLA.H = (color3_HSLA.H-lightVariation/360)%360;
            color3_HSLA.L = Math.max(0, Math.min(1, (color3_HSLA.L + lightVariation / 100)));
            this.colors.push(__WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].fromHSL(color3_HSLA));
            this.initialized = true;
        }
        var currentStep = Math.floor((currentTime - animationStartedTime) / options.stepTime);
        if (this.lastStep !== currentStep) {
            leds.forEach(function (led) {
                var rnd = Math.ceil(Math.random() * 3) - 1;
                led.color = _this.colors[rnd];
            });
            this.lastStep = currentStep;
        }
    };
    ShineEffect._name = 'shine';
    return ShineEffect;
}(__WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (ShineEffect);


/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EffectBase__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Color__ = __webpack_require__(0);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Simulates a candlelight
 */
var CandleEffect = /** @class */ (function (_super) {
    __extends(CandleEffect, _super);
    function CandleEffect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.maxBrightnessChange = NaN; // From the base Color, max brightness change allowed
        return _this;
    }
    CandleEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        if (!this.initialized) {
            this.setEasingFn('random');
            leds.forEach(function (led) {
                led.color = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](options.color[0], options.color[1], options.color[2]);
            });
            this.maxBrightnessChange = ((!isNaN(options.maxBrightnessChange) ? options.maxBrightnessChange : 50) / 100);
            this.initialized = true;
        }
        var sign = (0.5 > Math.random()) ? -1 : 1;
        var change = Math.min((this.maxBrightnessChange * 255), 255 * Math.random());
        var color = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](Math.min(255, Math.round(Math.max(0, options.color[0] + sign * change))), Math.min(255, Math.round(Math.max(0, options.color[1] + sign * change))), Math.min(255, Math.round(Math.max(0, options.color[2] + sign * change))));
        leds.forEach(function (led) {
            led.color = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].clone(color);
        });
    };
    CandleEffect._name = 'candle';
    return CandleEffect;
}(__WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (CandleEffect);


/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EffectBase__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Color__ = __webpack_require__(0);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Music dancing moving with audio signal
 * Important NOTE: This Effect is a simple Javascript class and has no access to an audio device
 * If you want to use it, it's up to you to update the AudioEffect.current_rms_value (from 0 to 1)
 */
var AudioEffect = /** @class */ (function (_super) {
    __extends(AudioEffect, _super);
    function AudioEffect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.linear = false;
        _this.advanced = false;
        _this.smooth = false;
        _this.count = 0;
        _this.reverse = false;
        _this.colorOFF = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](0, 0, 0);
        return _this;
    }
    AudioEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        var _this = this;
        if (!this.initialized) {
            this.initialized = true;
            this.count = leds.length;
            this.reverse = options.direction === 'reverse';
            this.linear = (options.linear === true);
            if (options.advanced === true) {
                this.slices = options.slices;
                this.advanced = true;
                this.smooth = options.smooth || false;
            }
            else {
                this.lowLevelColor = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](options.slices[0][0], options.slices[0][1], options.slices[0][2]);
                this.highLevelColor = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](options.slices[1][0], options.slices[1][1], options.slices[1][2]);
                this.advanced = false;
            }
        }
        var currentColor;
        switch (this.linear) {
            case false:
                if (this.advanced) {
                    for (var i = 0; i < this.slices.length; i++) {
                        if (100 * AudioEffect.current_rms_value <= this.slices[i][1]) {
                            if (this.smooth && i < this.slices.length - 1) {
                                var colorA = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](this.slices[i][2][0], this.slices[i][2][1], this.slices[i][2][2]);
                                var colorB = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](this.slices[i + 1][2][0], this.slices[i + 1][2][1], this.slices[i + 1][2][2]);
                                currentColor = __WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */].smooth(colorA, colorB, AudioEffect.current_rms_value);
                            }
                            else {
                                currentColor = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](this.slices[i][2][0], this.slices[i][2][1], this.slices[i][2][2]);
                            }
                            break;
                        }
                    }
                }
                else {
                    currentColor = __WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */].smooth(this.lowLevelColor, this.highLevelColor, AudioEffect.current_rms_value);
                }
                leds.forEach(function (led) {
                    led.color = currentColor;
                });
                break;
            case true:
                var breakPoint_1 = Math.floor(AudioEffect.current_rms_value * (this.count - 1));
                if (this.advanced) {
                    var currentCursor = 0;
                    for (var i = 0; i < this.slices.length; i++) {
                        var currentSliceBreakPoint = (i === this.slices.length - 1) ? this.count - 1 :
                            Math.floor(0.01 * this.count * this.slices[i + 1][0]);
                        for (var j = currentCursor; j <= currentSliceBreakPoint && j <= breakPoint_1; j++) {
                            var colorA = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](this.slices[i][2][0], this.slices[i][2][1], this.slices[i][2][2]);
                            var colorB = null;
                            if (i === this.slices.length - 1) {
                                colorB = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](this.slices[i][2][0], this.slices[i][2][1], this.slices[i][2][2]);
                            }
                            else {
                                colorB = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](this.slices[i + 1][2][0], this.slices[i + 1][2][1], this.slices[i + 1][2][2]);
                            }
                            if (this.smooth) {
                                var smoothFactor = (j - currentCursor) / (currentSliceBreakPoint - currentCursor);
                                currentColor = __WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */].smooth(colorA, colorB, smoothFactor);
                            }
                            else {
                                currentColor = (i === this.slices.length - 1) ? colorB : colorA;
                            }
                            if (this.reverse) {
                                leds[this.count - 1 - j].color = currentColor;
                            }
                            else {
                                leds[j].color = currentColor;
                            }
                        }
                        currentCursor = currentSliceBreakPoint + 1;
                    }
                    for (var i = breakPoint_1; i < this.count; i++) {
                        if (this.reverse) {
                            leds[this.count - 1 - i].color = this.colorOFF;
                        }
                        else {
                            leds[i].color = this.colorOFF;
                        }
                    }
                }
                else {
                    leds.forEach(function (led, index) {
                        if (_this.reverse) {
                            led = leds[_this.count - 1 - index];
                        }
                        if (index < breakPoint_1) {
                            led.color = __WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */].smooth(_this.lowLevelColor, _this.highLevelColor, _this.reverse ? ((_this.count - index) / _this.count) : (index / _this.count));
                        }
                        else {
                            led.color = _this.colorOFF;
                        }
                    });
                }
                break;
        }
    };
    AudioEffect._name = 'audio';
    AudioEffect.current_rms_value = 0; // Will be manually updated by the server
    return AudioEffect;
}(__WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (AudioEffect);


/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Color__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_StepTimeAbstract__ = __webpack_require__(1);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Simulates one or more bouncing balls
 * Reference: This effect is adapted from 'Bouncing Ball' by Hans
 * https://www.tweaking4all.com/hardware/arduino/adruino-led-strip-effects/
 */
var BouncingBallEffect = /** @class */ (function (_super) {
    __extends(BouncingBallEffect, _super);
    function BouncingBallEffect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.colors = [__WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */].Blue, __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */].Red, __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */].Yellow, __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */].Green, __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */].Pink, __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */].Purple, __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */].Orange];
        _this.colorLinks = [];
        _this.trails = false;
        _this.reverse = false;
        _this.trailsLength = 5;
        _this.tracker = [];
        return _this;
    }
    BouncingBallEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        if (!this.initialized) {
            this.setEasingFn('linear');
            this.initialized = true;
            this.ledsCount = leds.length;
            this.BallCount = options.ballCount;
            this.trails = options.trails;
            this.trailsLength = Math.max(0, options.trailsLength);
            this.reverse = options.direction !== 'normal';
            this.randomColors = options.randomColors;
            this.Gravity = options.gravity || -9.81;
            this.ImpactVelocityLimit = 1 / this.ledsCount;
            this.StartHeight = options.startHeight / 100;
            this.Height = []; //Size = BallCount
            this.ImpactVelocityStart = Math.sqrt(-2 * this.Gravity * this.StartHeight);
            this.ImpactVelocity = [];
            this.TimeSinceLastBounce = [];
            this.Position = [];
            this.ClockTimeSinceLastBounce = [];
            this.Dampening = [];
            this.tracker = [];
            if (!this.randomColors) {
                this.baseColor = new __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */](options.color[0], options.color[1], options.color[2]);
            }
            for (var i = 0; i < this.BallCount; i++) {
                this.ClockTimeSinceLastBounce[i] = 0;
                this.Height[i] = this.StartHeight;
                this.Position[i] = 0;
                this.ImpactVelocity[i] = this.ImpactVelocityStart;
                this.TimeSinceLastBounce[i] = 0;
                this.Dampening[i] = (1 - options.dampening / 100) - i / Math.pow(this.BallCount, 2);
                this.colorLinks[i] = this.colors[Math.floor(Math.random() * this.colors.length)];
            }
            var k = (Math.log(this.ImpactVelocityLimit / this.ImpactVelocityStart)) / Math.log(this.Dampening[0]);
            this.stepTime = animationTime / Math.ceil(k);
            this.resetStep();
        }
        if (this.stepCheck()) {
            for (var i = 0; i < this.ledsCount; i++) {
                leds[i].color = __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */].Off;
            }
            for (var i = 0; i < this.BallCount; i++) {
                var color = this.randomColors ? this.colorLinks[i] : this.baseColor;
                var index = this.reverse ? this.ledsCount - 1 - this.Position[i] : this.Position[i];
                if (this.trails) {
                    if (isNaN(this.tracker[i])) {
                        this.tracker[i] = index;
                    }
                    else {
                        var currentMovingDirection = Math.sign(index - this.tracker[i]);
                        this.tracker[i] = index;
                        var opacityFactor = this.ImpactVelocity[i] / this.ImpactVelocityStart;
                        for (var j = 0; j < this.trailsLength; j++) {
                            var k = index - currentMovingDirection * j;
                            if (k >= 0 && k < this.ledsCount) {
                                leds[k].color
                                    = this.trail(color, j, this.trailsLength, Math.sin(Math.PI / 2 * Math.pow(opacityFactor, 3)));
                            }
                        }
                    }
                }
                leds[index].color = color;
            }
        }
    };
    BouncingBallEffect.prototype.onStepChange = function (currentStep, delta, firstChange) {
        if (!firstChange) {
            var currentTime = new Date().getTime();
            for (var i = 0; i < this.BallCount; i++) {
                this.TimeSinceLastBounce[i] = currentTime - this.ClockTimeSinceLastBounce[i];
                this.Height[i] = 0.5 * this.Gravity * Math.pow(this.TimeSinceLastBounce[i] / 1000, 2.0)
                    + this.ImpactVelocity[i] * this.TimeSinceLastBounce[i] / 1000;
                if (this.Height[i] < 0) {
                    this.Height[i] = 0;
                    this.ImpactVelocity[i] *= this.Dampening[i];
                    this.ClockTimeSinceLastBounce[i] = currentTime;
                    if (this.ImpactVelocity[i] < this.ImpactVelocityLimit) {
                        this.ImpactVelocity[i] = this.ImpactVelocityStart;
                    }
                }
                this.Position[i] = Math.round(this.Height[i] * (this.ledsCount - 1) / this.StartHeight);
            }
        }
    };
    BouncingBallEffect.prototype.trail = function (base, distance, trailsLength, opacityFactor) {
        if (trailsLength === void 0) { trailsLength = 5; }
        if (opacityFactor === void 0) { opacityFactor = 1; }
        if (distance > trailsLength) {
            return __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */].Off;
        }
        else
            return new __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */](Math.floor(base.R * opacityFactor * (1 - distance / trailsLength)), Math.floor(base.G * opacityFactor * (1 - distance / trailsLength)), Math.floor(base.B * opacityFactor * (1 - distance / trailsLength)));
    };
    BouncingBallEffect._name = 'bouncing_ball';
    return BouncingBallEffect;
}(__WEBPACK_IMPORTED_MODULE_1__utils_StepTimeAbstract__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (BouncingBallEffect);


/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EffectBase__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Color__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_StepTimeAbstract__ = __webpack_require__(1);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



/**
 * Knight Rider Effect
 */
var KnightRiderEffect = /** @class */ (function (_super) {
    __extends(KnightRiderEffect, _super);
    function KnightRiderEffect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.scannerWidth = 0;
        _this.breakTime = 100;
        _this.headLimitPosition = 0;
        _this.stepTime = 0;
        _this.oneWayTime = 0;
        _this.headMovingLength = 0;
        _this.cursor = 0;
        return _this;
    }
    KnightRiderEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        if (!this.initialized) {
            this.initialized = true;
            this.setEasingFn(options.easing);
            this.baseColor = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](options.baseColor[0], options.baseColor[1], options.baseColor[2]);
            this.scannerWidth = options.scannerWidth || 3;
            this.ledsCount = leds.length;
            this.breakTime = !isNaN(options.breakTime) ? options.breakTime : 500;
            this.stepTime = options.stepTime;
            this.resetStep();
            this.oneWayTime = (this.stepTime - 2 * this.breakTime) / 2;
            this.headLimitPosition = this.scannerWidth + 1;
            this.headMovingLength = leds.length - 2 * this.scannerWidth;
        }
        var now = new Date().getTime();
        this.stepCheck(now);
        var currentTimeRelative = now - this.lastStepTime;
        if (currentTimeRelative < this.oneWayTime) {
            this.exec(leds, currentTimeRelative);
        }
        else if (currentTimeRelative < this.oneWayTime + this.breakTime) {
        }
        else if (currentTimeRelative < 2 * this.oneWayTime + this.breakTime) {
            this.exec(leds, currentTimeRelative, true);
        }
        else {
        }
    };
    KnightRiderEffect.prototype.exec = function (leds, currentTimeRelative, reverse) {
        if (reverse === void 0) { reverse = false; }
        var percent = NaN;
        if (!reverse) {
            percent = this.percentState(0, this.oneWayTime, currentTimeRelative);
        }
        else {
            percent = this.percentState(this.oneWayTime + this.breakTime, this.oneWayTime, currentTimeRelative);
        }
        leds.forEach(function (led) {
            led.color = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].Off;
        });
        var headPosition = this.headLimitPosition + Math.floor(percent * this.headMovingLength) - 1;
        if (reverse) {
            headPosition = leds.length - 1 - headPosition;
        }
        leds[headPosition].color = this.baseColor;
        for (var j = 1; j <= this.scannerWidth; j++) {
            var color = __WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */].smooth(this.baseColor, __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].Off, j / this.scannerWidth);
            leds[headPosition + j].color = color;
            leds[headPosition - j].color = color;
        }
    };
    KnightRiderEffect.prototype.onStepChange = function (currentStep, delta) {
    };
    KnightRiderEffect._name = 'knight_rider';
    return KnightRiderEffect;
}(__WEBPACK_IMPORTED_MODULE_2__utils_StepTimeAbstract__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (KnightRiderEffect);


/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Color__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_StepTimeAbstract__ = __webpack_require__(1);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Twinkle Effect
 */
var TwinkleEffect = /** @class */ (function (_super) {
    __extends(TwinkleEffect, _super);
    function TwinkleEffect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.randomColors = false;
        _this.arr = [];
        _this.enabled = [];
        _this.colors = [];
        return _this;
    }
    TwinkleEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        if (!this.initialized) {
            this.initialized = true;
            this.setEasingFn(options.easing);
            this.baseColor = new __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */](options.baseColor[0], options.baseColor[1], options.baseColor[2]);
            this.stepTime = options.stepTime;
            this.resetStep();
            this.randomColors = options.randomColors;
            this.ledsCount = leds.length;
            this.minEnabledPercent = options.minEnabledPercent / 100;
            this.maxEnabledPercent = Math.max(this.minEnabledPercent, options.maxEnabledPercent / 100);
            this.arr = [];
            this.colors = [];
            this.lastPercentState = NaN;
            for (var i = 0; i < leds.length; i++) {
                this.arr[i] = i;
                this.colors[i] = new __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */](Math.floor(Math.random() * 255), Math.floor(Math.random() * 255), Math.floor(Math.random() * 255));
            }
            this.stepsCount = Math.max(1, options.stepsCount);
            this.lastSubStep = NaN;
        }
        var now = new Date().getTime();
        if (this.stepCheck(now)) {
            this.switch(leds);
        }
        var currentSubStep = Math.floor(this.percentState(this.lastStepTime, this.stepTime, now) * this.stepsCount);
        if (isNaN(this.lastSubStep) || this.lastSubStep != currentSubStep || this.stepsCount == 1) {
            var percentState = (1 + currentSubStep) / this.stepsCount;
            var limit = Math.ceil(percentState * this.enabled.length);
            for (var i = 0; i < limit; i++) {
                if (leds[this.enabled[i]].color == __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */].Off) {
                    leds[this.enabled[i]].color = this.randomColors ? this.getRandomColor() : this.baseColor;
                }
            }
            this.lastSubStep = currentSubStep;
        }
    };
    TwinkleEffect.prototype.onStepChange = function (currentStep, delta) {
    };
    /**
     * Get another set
     * @param leds
     */
    TwinkleEffect.prototype.switch = function (leds) {
        this.shuffle(this.arr);
        var percent = this.minEnabledPercent + (Math.random() * (this.maxEnabledPercent - this.minEnabledPercent));
        this.enabled = this.arr.slice(0, Math.ceil(percent * (this.ledsCount)));
        leds.forEach(function (led) {
            led.color = __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */].Off;
        });
    };
    TwinkleEffect.prototype.getRandomColor = function () {
        return this.colors[Math.floor(Math.random() * (this.colors.length - 1))];
    };
    TwinkleEffect.prototype.shuffle = function (array) {
        var k = array.length;
        while (k > 0) {
            var i = Math.floor(Math.random() * k);
            k--;
            var temp = array[k];
            array[k] = array[i];
            array[i] = temp;
        }
        return array;
    };
    TwinkleEffect._name = 'twinkle';
    return TwinkleEffect;
}(__WEBPACK_IMPORTED_MODULE_1__utils_StepTimeAbstract__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (TwinkleEffect);


/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EffectBase__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Color__ = __webpack_require__(0);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Sparkle Effect
 */
var SparkleEffect = /** @class */ (function (_super) {
    __extends(SparkleEffect, _super);
    function SparkleEffect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.randomColors = false;
        _this.arr = [];
        _this.enabled = [];
        _this.colors = [];
        return _this;
    }
    SparkleEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        if (!this.initialized) {
            this.initialized = true;
            this.baseColor = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](options.baseColor[0], options.baseColor[1], options.baseColor[2]);
            this.randomColors = options.randomColors;
            this.ledsCount = leds.length;
            this.minEnabledPercent = options.minEnabledPercent / 100;
            this.maxEnabledPercent = Math.max(this.minEnabledPercent, options.maxEnabledPercent / 100);
            this.arr = [];
            this.colors = [];
            this.stepTime = options.stepTime;
            for (var i = 0; i < leds.length; i++) {
                this.arr[i] = i;
                this.colors[i] = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](Math.floor(Math.random() * 255), Math.floor(Math.random() * 255), Math.floor(Math.random() * 255));
            }
        }
        if (animationTime == 0) {
            return;
        }
        var currentStep = Math.floor((currentTime - animationStartedTime) / this.stepTime);
        if (isNaN(this.lastStep) || this.lastStep != currentStep) {
            this.lastStep = currentStep;
            this.switch(leds);
        }
        for (var i = 0; i < this.enabled.length; i++) {
            if (leds[this.enabled[i]].color == __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].Off) {
                leds[this.enabled[i]].color = this.randomColors ? this.getRandomColor() : this.baseColor;
            }
        }
    };
    SparkleEffect.prototype.switch = function (leds) {
        this.shuffle(this.arr);
        var percent = this.minEnabledPercent + (Math.random() * (this.maxEnabledPercent - this.minEnabledPercent));
        this.enabled = this.arr.slice(0, Math.ceil(percent * (this.ledsCount)));
        leds.forEach(function (led) {
            led.color = __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].Off;
        });
    };
    SparkleEffect.prototype.getRandomColor = function () {
        return this.colors[Math.floor(Math.random() * (this.colors.length - 1))];
    };
    SparkleEffect.prototype.shuffle = function (array) {
        var k = array.length;
        while (k > 0) {
            var i = Math.floor(Math.random() * k);
            k--;
            var temp = array[k];
            array[k] = array[i];
            array[i] = temp;
        }
        return array;
    };
    SparkleEffect._name = 'sparkle';
    return SparkleEffect;
}(__WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (SparkleEffect);


/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EffectBase__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Color__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_StepTimeAbstract__ = __webpack_require__(1);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



/**
 * Moving Wave Effect
 */
var MovingWavesEffect = /** @class */ (function (_super) {
    __extends(MovingWavesEffect, _super);
    function MovingWavesEffect() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MovingWavesEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        if (!this.initialized) {
            this.baseColor = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](options.baseColor[0], options.baseColor[1], options.baseColor[2]);
            this.minColor = new __WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */](Math.floor(0.2 * options.baseColor[0]), Math.floor(0.1 * options.baseColor[1]), Math.floor(0.1 * options.baseColor[2]));
            this.ledsCount = leds.length;
            this.stepTime = options.stepTime;
            this.resetStep();
            this.waveSize = Math.min(this.ledsCount - 1, options.waveSize);
            this.moveDirection = options.direction !== 'normal' ? -1 : 1;
            this.colors = [];
            this.colorLinks = [];
            this.cursor = 0;
            var distance = 0;
            var sign = 1;
            if (options.forceSmooth) {
                while (this.waveSize > 0
                    && Math.round(leds.length / (2 * this.waveSize)) !== leds.length / (2 * this.waveSize)) {
                    this.waveSize--;
                }
                if (leds.length / this.waveSize !== Math.round(leds.length / this.waveSize)) {
                    this.waveSize = 0;
                }
            }
            var colorsArraySize = options.forceSmooth ?
                leds.length : 2 * this.waveSize * (1 + Math.ceil(this.ledsCount / (2 * this.waveSize)));
            for (var i = 0; i < colorsArraySize; i++) {
                if (!this.colors[distance]) {
                    var percent = Math.sin((Math.PI / 2) * Math.pow(((this.waveSize - distance + 1) / this.waveSize), 3));
                    this.colors[distance] = __WEBPACK_IMPORTED_MODULE_0__EffectBase__["a" /* default */].smooth(__WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].Off, this.baseColor, percent);
                }
                this.colorLinks[i] = this.colors[distance];
                if (i % this.waveSize == 0 && i != 0) {
                    sign *= -1;
                }
                distance = distance + sign;
            }
            this.initialized = true;
        }
        if (this.stepCheck()) {
            for (var i = 0; i < this.ledsCount; i++) {
                leds[i].color = this.colorLinks[(this.cursor + i) % this.colorLinks.length];
            }
        }
    };
    MovingWavesEffect.prototype.onStepChange = function (currentStep, delta, firstChange) {
        if (!firstChange) {
            this.cursor = (this.cursor + this.moveDirection * delta) % (this.colorLinks.length);
            if (this.cursor < 0) {
                this.cursor = this.colorLinks.length + this.cursor;
            }
        }
    };
    MovingWavesEffect._name = 'moving_waves';
    return MovingWavesEffect;
}(__WEBPACK_IMPORTED_MODULE_2__utils_StepTimeAbstract__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (MovingWavesEffect);


/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Color__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_StepTimeAbstract__ = __webpack_require__(1);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Color Wipe Effect
 */
var ColorWipeEffect = /** @class */ (function (_super) {
    __extends(ColorWipeEffect, _super);
    function ColorWipeEffect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.colorLinks = [];
        return _this;
    }
    ColorWipeEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        var _this = this;
        if (!this.initialized) {
            this.initialized = true;
            this.colors = [];
            options.colors.forEach(function (color) {
                _this.colors.push(new __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */](color[0], color[1], color[2]));
            });
            this.ledsCount = leds.length;
            this.moveDirection = options.direction !== 'normal' ? 1 : -1;
            this.stepTime = options.stepTime;
            this.resetStep();
            this.cursor = 0;
            for (var i = 0; i < this.colors.length; i++) {
                for (var j = 0; j < this.ledsCount; j++) {
                    this.colorLinks[i * this.ledsCount + j] = this.colors[i];
                }
            }
        }
        if (this.stepCheck()) {
            for (var i = 0; i < this.ledsCount; i++) {
                leds[i].color = this.colorLinks[(this.cursor + i) % this.colorLinks.length];
            }
        }
    };
    ColorWipeEffect.prototype.onStepChange = function (currentStep, delta, firstChange) {
        if (!firstChange) {
            this.cursor = (this.cursor + this.moveDirection * delta) % (this.colorLinks.length);
            if (this.cursor < 0) {
                this.cursor = this.colorLinks.length + this.cursor;
            }
        }
    };
    ColorWipeEffect._name = 'color_wipe';
    return ColorWipeEffect;
}(__WEBPACK_IMPORTED_MODULE_1__utils_StepTimeAbstract__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (ColorWipeEffect);


/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Color__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_StepTimeAbstract__ = __webpack_require__(1);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Theater Chase Effect
 */
var TheaterChaseEffect = /** @class */ (function (_super) {
    __extends(TheaterChaseEffect, _super);
    function TheaterChaseEffect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.space = NaN;
        _this.colorLinks = [];
        return _this;
    }
    TheaterChaseEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        if (!this.initialized) {
            this.initialized = true;
            this.baseColor = new __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */](options.baseColor[0], options.baseColor[1], options.baseColor[2]);
            this.ledsCount = leds.length;
            this.stepTime = options.stepTime;
            this.resetStep();
            this.space = options.space;
            this.moveDirection = options.direction !== 'normal' ? 1 : -1;
            this.cursor = 0;
            this.rainbow = options.rainbow;
            this.colorLinks = [];
            if (options.forceSmooth) {
                while (this.space + 1 > 0
                    && Math.round(leds.length / (this.space)) !== leds.length / (this.space)) {
                    this.space--;
                }
                if (leds.length / this.space !== Math.round(leds.length / this.space)) {
                    this.space = 0;
                }
            }
            var colorsArraySize = options.forceSmooth ?
                leds.length : 2 * (this.space) * (1 + Math.ceil(this.ledsCount / (2 * (this.space))));
            for (var i = 0; i < colorsArraySize; i++) {
                if (i % this.space !== 0) {
                    this.colorLinks[i] = __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */].Off;
                }
                else if (!this.rainbow) {
                    this.colorLinks[i] = this.baseColor;
                }
                else {
                    this.colorLinks[i] = __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */].fromHSL({
                        H: (i / (colorsArraySize - 1)),
                        S: 1,
                        L: 0.6
                    });
                }
            }
        }
        if (this.stepCheck()) {
            for (var i = 0; i < this.ledsCount; i++) {
                leds[i].color = this.colorLinks[(this.cursor + i) % (this.colorLinks.length)];
            }
        }
    };
    TheaterChaseEffect.prototype.onStepChange = function (currentStep, delta, firstChange) {
        if (!firstChange) {
            this.cursor = (this.cursor + this.moveDirection * delta) % (this.colorLinks.length);
            if (this.cursor < 0) {
                this.cursor = this.colorLinks.length + this.cursor;
            }
        }
    };
    TheaterChaseEffect._name = 'theater_chase';
    return TheaterChaseEffect;
}(__WEBPACK_IMPORTED_MODULE_1__utils_StepTimeAbstract__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (TheaterChaseEffect);


/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Color__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_StepTimeAbstract__ = __webpack_require__(1);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Fire effect
 * Reference: Adapted from tweaking4all, FastLed/Fire2012 by Mark Kriegsman
 * https://github.com/FastLED/FastLED/blob/master/examples/Fire2012/Fire2012.ino
 * https://www.tweaking4all.com/hardware/arduino/adruino-led-strip-effects/#cylon
 */
var FireEffect = /** @class */ (function (_super) {
    __extends(FireEffect, _super);
    function FireEffect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.space = NaN;
        _this.reverse = false;
        _this.heat = [];
        return _this;
    }
    FireEffect.prototype.process = function (options, leds, animationStartedTime, animationTime, currentTime) {
        if (!this.initialized) {
            this.initialized = true;
            this.ledsCount = leds.length;
            this.cooling = options.cooling;
            this.sparking = options.sparking;
            this.stepTime = options.stepTime;
            this.bothSides = options.bothSides;
            this.resetStep();
            this.reverse = options.direction !== 'normal' ? true : false;
            for (var i = 0; i < this.ledsCount; i++) {
                this.heat[i] = 0;
                leds[i].color = __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */].Off;
            }
        }
        if (this.stepCheck()) {
            // Step 4.  Convert heat to LED colors
            if (!this.bothSides) {
                for (var j = 0; j < this.ledsCount; j++) {
                    this.setPixelHeatColor(leds, j, this.heat[j]);
                }
            }
            else {
                for (var j = 0; j < this.ledsCount / 2; j++) {
                    this.setPixelHeatColor(leds, j, this.heat[j]);
                    this.setPixelHeatColor(leds, this.ledsCount - 1 - j, this.heat[j]);
                }
            }
        }
    };
    FireEffect.prototype.setPixelHeatColor = function (leds, Pixel, temperature) {
        if (this.reverse) {
            Pixel = this.ledsCount - 1 - Pixel;
        }
        // Scale 'heat' down from 0-255 to 0-191
        var t192 = Math.round((temperature / 255) * 191);
        // calculate ramp up from
        var heatramp = t192 & 0x3F; // 0..63
        heatramp = heatramp << 2; // scale up to 0..252
        // figure out which third of the spectrum we're in:
        if (t192 > 0x80) {
            leds[Pixel].color = new __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */](255, 255, heatramp);
        }
        else if (t192 > 0x40) {
            leds[Pixel].color = new __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */](255, heatramp, 0);
        }
        else {
            leds[Pixel].color = new __WEBPACK_IMPORTED_MODULE_0__Color__["a" /* default */](heatramp, 0, 0);
        }
    };
    FireEffect.prototype.onStepChange = function (currentStep, delta, firstChange) {
        if (!firstChange) {
            // Step 1.  Cool down every cell a little
            for (var i = 0; i < this.ledsCount; i++) {
                var cooldown = Math.random() * ((this.cooling * 10 / this.ledsCount) + 2);
                if (cooldown > this.heat[i]) {
                    this.heat[i] = 0;
                }
                else {
                    this.heat[i] = this.heat[i] - cooldown;
                }
            }
            // Step 2.  Heat from each cell drifts 'up' and diffuses a little
            for (var k = this.ledsCount - 1; k >= 2; k--) {
                this.heat[k] = (this.heat[k - 1] + this.heat[k - 2] + this.heat[k - 2]) / 3;
            }
            // Step 3.  Randomly ignite new 'sparks' near the bottom
            if (Math.ceil(Math.random() * 255) < this.sparking) {
                var y = Math.ceil(Math.random() * 7);
                this.heat[y] = Math.ceil(Math.random() * (255 - 160) + 160);
                //this.heat[y] = random(160,255);
            }
        }
    };
    FireEffect._name = 'fire';
    return FireEffect;
}(__WEBPACK_IMPORTED_MODULE_1__utils_StepTimeAbstract__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (FireEffect);


/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * LED representation
 */
var LED = /** @class */ (function () {
    function LED(color) {
        this.color = color;
        this.id = LED.count++;
    }
    LED.reset = function () {
        LED.count = 0; // To count again from 0
    };
    LED.count = 0; // To assign unique IDs
    return LED;
}());
/* harmony default export */ __webpack_exports__["a"] = (LED);


/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__LED__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Color__ = __webpack_require__(0);


/**
 * LEDs array initializer + accessor
 */
var LEDSController = /** @class */ (function () {
    function LEDSController() {
    }
    /**
     * Fill the set with expected count LEDs
     * @param {Number} LEDsCount
     */
    LEDSController.createAll = function (LEDsCount) {
        if (LEDsCount === void 0) { LEDsCount = 1; }
        __WEBPACK_IMPORTED_MODULE_0__LED__["a" /* default */].reset();
        LEDSController.LEDs = [];
        for (var i = 0; i < LEDsCount; i++) {
            LEDSController.LEDs.push(new __WEBPACK_IMPORTED_MODULE_0__LED__["a" /* default */](__WEBPACK_IMPORTED_MODULE_1__Color__["a" /* default */].Off)); // switched off by default
        }
    };
    /**
     * Get all LEDs
     * @returns {Array<LED>}
     */
    LEDSController.getAll = function () {
        return LEDSController.LEDs;
    };
    LEDSController.LEDs = [];
    return LEDSController;
}());
/* harmony default export */ __webpack_exports__["a"] = (LEDSController);


/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__ = __webpack_require__(26);

/**
 * Entry point for 'NOT Typescript' environments usage
 */
var LightItUpEngine = /** @class */ (function () {
    function LightItUpEngine() {
    }
    LightItUpEngine.Color = __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["e" /* Color */];
    LightItUpEngine.EffectBase = __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["g" /* EffectBase */];
    LightItUpEngine.EffectConfig = __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["h" /* EffectConfig */];
    LightItUpEngine.EffectController = __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["i" /* EffectController */];
    LightItUpEngine.LED = __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["n" /* LED */];
    LightItUpEngine.LEDAnimator = __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["o" /* LEDAnimator */];
    LightItUpEngine.LEDController = __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["p" /* LEDController */];
    LightItUpEngine.EffectsAPI_JSON = __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["j" /* EffectsAPI_JSON */];
    LightItUpEngine.AudioEffect = __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["a" /* AudioEffect */];
    LightItUpEngine.Effects = {
        AudioEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["a" /* AudioEffect */],
        BouncingBallEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["b" /* BouncingBallEffect */],
        BreathEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["c" /* BreathEffect */],
        CandleEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["d" /* CandleEffect */],
        ColorWipeEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["f" /* ColorWipeEffect */],
        KnightRiderEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["m" /* KnightRiderEffect */],
        ExplodeEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["k" /* ExplodeEffect */],
        FireEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["l" /* FireEffect */],
        MovingWavesEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["q" /* MovingWavesEffect */],
        RainbowEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["r" /* RainbowEffect */],
        RandomColorEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["s" /* RandomColorEffect */],
        ShineEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["t" /* ShineEffect */],
        SimpleColorEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["u" /* SimpleColorEffect */],
        SparkleEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["v" /* SparkleEffect */],
        StackEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["w" /* StackEffect */],
        StepperEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["x" /* StepperEffect */],
        TheaterChaseEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["y" /* TheaterChaseEffect */],
        TrailsEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["z" /* TrailsEffect */],
        TwinkleEffect: __WEBPACK_IMPORTED_MODULE_0__LightItUpEngineCore__["A" /* TwinkleEffect */],
    };
    return LightItUpEngine;
}());
/* harmony default export */ __webpack_exports__["default"] = (LightItUpEngine);


/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Color__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__EffectBase__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__EffectController__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__LED__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__LEDAnimator__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__EffectConfig__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__LEDController__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__EffectsAPI_JSON__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__effects_AudioEffect__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__effects_BouncingBallEffect__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__effects_BreathEffect__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__effects_CandleEffect__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__effects_ColorWipeEffect__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__effects_KnightRiderEffect__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__effects_ExplodeEffect__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__effects_FireEffect__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__effects_MovingWavesEffect__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__effects_RainbowEffect__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__effects_RandomColorEffect__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__effects_ShineEffect__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__effects_SimpleColorEffect__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__effects_SparkleEffect__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__effects_StackEffect__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__effects_StepperEffect__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__effects_TheaterChaseEffect__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__effects_TrailsEffect__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__effects_TwinkleEffect__ = __webpack_require__(17);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_0__Color__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return __WEBPACK_IMPORTED_MODULE_1__EffectBase__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return __WEBPACK_IMPORTED_MODULE_5__EffectConfig__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return __WEBPACK_IMPORTED_MODULE_2__EffectController__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return __WEBPACK_IMPORTED_MODULE_3__LED__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return __WEBPACK_IMPORTED_MODULE_4__LEDAnimator__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return __WEBPACK_IMPORTED_MODULE_6__LEDController__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return __WEBPACK_IMPORTED_MODULE_7__EffectsAPI_JSON__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_8__effects_AudioEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_9__effects_BouncingBallEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_10__effects_BreathEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_11__effects_CandleEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_12__effects_ColorWipeEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return __WEBPACK_IMPORTED_MODULE_13__effects_KnightRiderEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return __WEBPACK_IMPORTED_MODULE_14__effects_ExplodeEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return __WEBPACK_IMPORTED_MODULE_15__effects_FireEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return __WEBPACK_IMPORTED_MODULE_16__effects_MovingWavesEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return __WEBPACK_IMPORTED_MODULE_17__effects_RainbowEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return __WEBPACK_IMPORTED_MODULE_18__effects_RandomColorEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "t", function() { return __WEBPACK_IMPORTED_MODULE_19__effects_ShineEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "u", function() { return __WEBPACK_IMPORTED_MODULE_20__effects_SimpleColorEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "v", function() { return __WEBPACK_IMPORTED_MODULE_21__effects_SparkleEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "w", function() { return __WEBPACK_IMPORTED_MODULE_22__effects_StackEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "x", function() { return __WEBPACK_IMPORTED_MODULE_23__effects_StepperEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "y", function() { return __WEBPACK_IMPORTED_MODULE_24__effects_TheaterChaseEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "z", function() { return __WEBPACK_IMPORTED_MODULE_25__effects_TrailsEffect__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "A", function() { return __WEBPACK_IMPORTED_MODULE_26__effects_TwinkleEffect__["a"]; });
/***********Public classes centralizer***********/








// Effects






















/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Some useful methods shared by all the effects
 */
var EffectsUtils = /** @class */ (function () {
    function EffectsUtils() {
    }
    // Different well known easing & bezier functions to compute effects proggress state regarding to the current time
    EffectsUtils.Easing = {
        cubicBezierBase: function (y1, y2, t) { return (+(3 * y1 * t * Math.pow((1 - t), 2)) + (3 * y2 * t * t * (1 - t)) + t * t * t); },
        cubicBezier: function (p1, p2, t) { return EffectsUtils.Easing.cubicBezierBase(p1.y, p2.y, t); },
        linear: function (t) { return t; },
        easeInQuad: function (t) { return t * t; },
        easeOutQuad: function (t) { return t * (2 - t); },
        easeInOutQuad: function (t) { return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },
        easeInCubic: function (t) { return t * t * t; },
        easeOutCubic: function (t) { return (--t) * t * t + 1; },
        easeInOutCubic: function (t) { return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },
        easeInQuart: function (t) { return t * t * t * t; },
        easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },
        easeInOutQuart: function (t) { return t < .5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t; },
        easeInQuint: function (t) { return t * t * t * t * t; },
        easeOutQuint: function (t) { return 1 + (--t) * t * t * t * t; },
        easeInOutQuint: function (t) { return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; },
        random: function (t) { return Math.random(); },
    };
    return EffectsUtils;
}());
/* harmony default export */ __webpack_exports__["a"] = (EffectsUtils);


/***/ }),
/* 28 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Simple Point (x, y) representation
 */
var Point = /** @class */ (function () {
    function Point(x, y) {
        this.x = x;
        this.y = y;
    }
    return Point;
}());
/* harmony default export */ __webpack_exports__["a"] = (Point);


/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__EffectController__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__LEDController__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__effects_utils_StepTimeAbstract__ = __webpack_require__(1);



/**
 * Effects assignment manager
 */
var LEDAnimator = /** @class */ (function () {
    function LEDAnimator() {
    }
    /**
     * Prevents an effect to be played (for example when its repeat limit or limit time is reached)
     * @param {number} index Effect index inside the effects Array
     */
    LEDAnimator.stopEffect = function (index) {
        LEDAnimator.effects[index].enabled = false;
    };
    /**
     * Re-enable all stopped effects
     */
    LEDAnimator.enableAllEffects = function () {
        LEDAnimator.effects.forEach(function (effect) {
            effect.enabled = true;
        });
    };
    /**
     * Iterate through all the effects, apply them to the LEDs and send back the updated LEDs to the callback
     * @param {Function} callback
     * @param {boolean} reset
     * @param {number} currentEffectStartTime
     */
    LEDAnimator.processLEDs = function (callback, reset, currentEffectStartTime) {
        if (reset === void 0) { reset = false; }
        if (currentEffectStartTime === void 0) { currentEffectStartTime = NaN; }
        var time = new Date().getTime();
        LEDAnimator.enableAllEffects(); // Re-enabling effects for this iteration
        callback(LEDAnimator.processEffects(__WEBPACK_IMPORTED_MODULE_1__LEDController__["a" /* default */].getAll(), time, reset, currentEffectStartTime));
    };
    /**
     * Apply effects on LEDs array
     * @param {Array<LED>} LEDs
     * @param {number} time
     * @param {boolean} reset
     * @param {number} currentEffectStartTime
     */
    LEDAnimator.processEffects = function (LEDs, time, reset, currentEffectStartTime) {
        if (reset === void 0) { reset = false; }
        if (currentEffectStartTime === void 0) { currentEffectStartTime = NaN; }
        // If animation must be resetted
        if (reset || !LEDAnimator.startTime) {
            LEDAnimator.startTime = new Date().getTime();
        }
        // If animation should be resumed at a specified time
        if (!isNaN(currentEffectStartTime)) {
            LEDAnimator.startTime = currentEffectStartTime;
        }
        // Effects application loop
        LEDAnimator.effects.forEach(function (effect, index) {
            if (!effect.isEnabled || !effect.isActivated) {
                return; // Do nothing if effect has ended for this iteration
            }
            var duration = effect.options.duration || 0; // Current effect duration
            var delay = effect.options.delay || 0; // Current effect delay (time before it starts)
            var waitAtEnd = effect.options.waitAtEnd || 0; // Time to wait at end of current effect before resetting
            var repeat = effect.options.repeat || NaN; // Number of times to repeat the current effect
            // Stop the effect if it's over
            if (!isNaN(repeat) && ((time - LEDAnimator.startTime + delay) / (duration + waitAtEnd) > repeat)) {
                return LEDAnimator.stopEffect(index);
            }
            // Do nothing if effect is not in active state regarding to its delay, duration and waitAtEnd time
            if (delay + waitAtEnd + duration !== 0) {
                if ((time - LEDAnimator.startTime) % (delay + duration + waitAtEnd) < delay
                    ||
                        (waitAtEnd !== 0
                            && (time - LEDAnimator.startTime) % (delay + duration + waitAtEnd) >= delay + duration)) {
                    if (effect.instance instanceof __WEBPACK_IMPORTED_MODULE_2__effects_utils_StepTimeAbstract__["a" /* default */]) {
                        effect.instance.resetStep(time);
                    }
                    return;
                }
            }
            // Time reference to make the effects know from when to compute the state
            var thisEffectStartTime = (time - LEDAnimator.startTime)
                - (delay + duration + waitAtEnd)
                    * Math.floor((time - LEDAnimator.startTime) / (delay + duration + waitAtEnd));
            // Apply the effect
            __WEBPACK_IMPORTED_MODULE_0__EffectController__["a" /* default */].applyEffect(LEDs, effect, delay, duration, thisEffectStartTime);
        });
        return LEDs;
    };
    /**
     * Set the effects stack in the given order
     * @param {Array<EffectConfig>} effects
     * @param {boolean} doNotReset If true and effects have attached instances, then these instances will be used
     */
    LEDAnimator.setEffects = function (effects, doNotReset) {
        if (doNotReset === void 0) { doNotReset = false; }
        if (!doNotReset) {
            effects.forEach(function (effect) {
                if (effect.instance) {
                    effect.instance.forceReinitialize();
                }
            });
        }
        LEDAnimator.effects = effects;
    };
    LEDAnimator.effects = []; // Stores all the effects of the current animation
    LEDAnimator.startTime = NaN; // Time reference to the animation beginning
    return LEDAnimator;
}());
/* harmony default export */ __webpack_exports__["a"] = (LEDAnimator);


/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Effect wrapper class
 */
var EffectConfig = /** @class */ (function () {
    /**
     *
     * @param {string} name Effect unique name as defined inside the EffectController Class
     * @param options Options to configure and customize the effect
     */
    function EffectConfig(name, options) {
        this.name = name;
        this.options = options;
        this.enabled = true; // If false, linked effect won't be applied
        this.instance = null; // Linked effect object
    }
    Object.defineProperty(EffectConfig.prototype, "isEnabled", {
        /**
         * Check if the effect is enabled regarding to its time (delay, duration, wait at end) configuration
         * @returns {boolean}
         */
        get: function () {
            return this.enabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EffectConfig.prototype, "isActivated", {
        /**
         * User option to enable or disable the effect (it will override the 'enabled' property
         */
        get: function () {
            return this.options.activated;
        },
        enumerable: true,
        configurable: true
    });
    return EffectConfig;
}());
/* harmony default export */ __webpack_exports__["a"] = (EffectConfig);


/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EffectsAPI_JSON; });
/**
 * Expose all existing options of available effects
 */
var EffectsAPI_JSON = {
    "globalProperties": [
        {
            "id": "activated",
            "value": true,
            "title": "Activated",
            "description": "Enable/Disable",
            "type": "boolean",
            "global": true
        },
        {
            "id": "delay",
            "value": 0,
            "title": "Delay",
            "description": "Delay the beginning (ms)",
            "type": "integer",
            "min": 0,
            "step": 1,
            "global": true
        },
        {
            "id": "duration",
            "title": "Duration",
            "type": "integer",
            "description": "Useful when scheduling several effects (ms)",
            "value": 3000,
            "min": 1,
            "step": 1,
            "global": true
        },
        {
            "id": "waitAtEnd",
            "value": 0,
            "title": "Time to wait at end",
            "description": "Useful when scheduling several effects (ms)",
            "type": "integer",
            "min": 0,
            "step": 1,
            "global": true
        },
        {
            "id": "repeat",
            "value": null,
            "title": "Limit repetitions",
            "description": "How many times the effect should be processed, let empty for infinite",
            "type": "integer",
            "step": 1,
            "min": 1,
            "global": true
        }
    ],
    "list": [
        {
            "name": "simple-color",
            "title": "Simple Color Effect",
            "description": "An elementary effect that only sets a fixed color to all LEDs",
            "properties": [
                {
                    "id": "color",
                    "title": "Color basis",
                    "type": "color",
                    "description": "The color to set",
                    "value": [
                        0,
                        80,
                        250
                    ]
                }
            ]
        },
        {
            "name": "random-color",
            "title": "Random Color Effect",
            "description": "Set a random color at each step for all LEDs or one different color for each one",
            "properties": [
                {
                    "id": "bright",
                    "title": "Bright colors only",
                    "description": "Only choose random colors that are bright",
                    "type": "boolean",
                    "value": true
                },
                {
                    "id": "byled",
                    "title": "1 color for 1 led",
                    "description": "Set 1 different color for each LED",
                    "type": "boolean",
                    "value": false
                },
                {
                    "id": "stepTime",
                    "title": "Step time",
                    "description": "How much time a color is set (ms)",
                    "type": "integer",
                    "value": 500,
                    "min": 0,
                    "step": 1
                },
                {
                    "id": "smooth",
                    "title": "Smooth",
                    "description": "Fade from one step to another",
                    "type": "boolean",
                    "value": true
                },
                {
                    "id": "easing",
                    "title": "Easing",
                    "type": "easing",
                    "value": "linear"
                }
            ]
        },
        {
            "name": "trails",
            "title": "Running trails",
            "description": "Trailing particles bursts that follow one another",
            "properties": [
                {
                    "id": "baseColor",
                    "title": "Base color",
                    "description": "Color when the trail is elsewhere",
                    "type": "color",
                    "value": [
                        0,
                        60,
                        0
                    ]
                },
                {
                    "id": "trailsColor",
                    "title": "Trail color",
                    "description": "Color of trails",
                    "type": "color",
                    "value": [
                        0,
                        255,
                        0
                    ]
                },
                {
                    "id": "stepTime",
                    "title": "Cycle time",
                    "description": "Time to reach the end of the strip (ms)",
                    "type": "integer",
                    "value": 3000,
                    "min": 1,
                    "step": 1
                },
                {
                    "id": "frequency",
                    "title": "Trails space",
                    "description": "Space between 2 trails heads",
                    "type": "integer",
                    "value": 48,
                    "min": 0,
                    "step": 1
                },
                {
                    "id": "adjustFrequency",
                    "title": "Adjust frequency",
                    "description": "Force first and last LED continuity by finding a suitable frequency",
                    "type": "boolean",
                    "value": false
                },
                {
                    "id": "attenuation",
                    "title": "Attenuation %",
                    "description": "How much to darken next LEDs",
                    "type": "integer",
                    "value": 5,
                    "min": 1,
                    "step": 1
                },
                {
                    "id": "maxTrailLength",
                    "title": "Max trail length",
                    "description": "Where to cut the trail",
                    "type": "integer",
                    "value": 20,
                    "min": 0,
                    "step": 1
                },
                {
                    "id": "direction",
                    "title": "Direction",
                    "type": "direction",
                    "value": "normal"
                },
                {
                    "id": "easing",
                    "title": "Easing",
                    "type": "easing",
                    "value": "linear"
                }
            ]
        },
        {
            "name": "shine",
            "title": "Shining Effect",
            "description": "Shining particles by randomly and independently adjusting luminosity of each LED",
            "properties": [
                {
                    "id": "stepTime",
                    "title": "Step time",
                    "description": "How much time the LED color is set (ms)",
                    "type": "integer",
                    "value": 100,
                    "min": 1,
                    "step": 1
                },
                {
                    "id": "lightVariationPercent",
                    "title": "Light variation (%)",
                    "description": "How much the color light is able to vary from the base color",
                    "type": "integer",
                    "value": 20,
                    "min": 0,
                    "max": 100,
                    "step": 1
                },
                {
                    "id": "baseColor",
                    "title": "Base color",
                    "description": "Base color theme",
                    "type": "color",
                    "value": [
                        30,
                        0,
                        190
                    ]
                }
            ]
        },
        {
            "name": "explode",
            "title": "Explosion Effect",
            "description": "Simulates fusing particles after an explosion blast",
            "properties": [
                {
                    "id": "lifetime",
                    "title": "Particle Life time",
                    "description": "The particle will die after this time (ms)",
                    "type": "integer",
                    "value": 3000,
                    "min": 1,
                    "step": 1
                },
                {
                    "id": "maxTrailLength",
                    "title": "Trail length",
                    "description": "Where to cut the trail",
                    "type": "integer",
                    "value": 8,
                    "min": 0,
                    "step": 1
                },
                {
                    "id": "attenuation",
                    "title": "Attenuation %",
                    "description": "How darker look next LEDs",
                    "type": "integer",
                    "value": 12,
                    "min": 0,
                    "max": 100,
                    "step": 1
                },
                {
                    "id": "baseColor",
                    "title": "Base Color",
                    "description": "Particles color",
                    "type": "color",
                    "value": [
                        100,
                        200,
                        100
                    ]
                },
                {
                    "id": "stepTime",
                    "title": "Cycle time",
                    "description": "Time of the particles fusing (ms)",
                    "type": "integer",
                    "value": 5000,
                    "min": 0,
                    "step": 1
                },
                {
                    "id": "easing",
                    "title": "Easing",
                    "type": "easing",
                    "value": "easeInQuad"
                }
            ]
        },
        {
            "name": "stack",
            "title": "Stack Effect",
            "description": "Simulate a stack that fills along the time",
            "properties": [
                {
                    "id": "sameTourTime",
                    "title": "Same tour time",
                    "description": "If true each particle will take the same time to be stacked",
                    "type": "boolean",
                    "value": true
                },
                {
                    "id": "enabledColor",
                    "title": "Color 'ON'",
                    "description": "Color of a particle",
                    "type": "color",
                    "value": [
                        255,
                        0,
                        0
                    ]
                },
                {
                    "id": "disabledColor",
                    "title": "Color 'OFF'",
                    "description": "Color where there is no particle yet",
                    "type": "color",
                    "value": [
                        0,
                        0,
                        0
                    ]
                },
                {
                    "id": "stepTime",
                    "title": "Cycle time",
                    "description": "Time to fill the whole strip (ms)",
                    "type": "integer",
                    "value": 60000,
                    "min": 0,
                    "step": 1
                },
                {
                    "id": "direction",
                    "title": "Direction",
                    "type": "direction",
                    "value": "normal"
                },
                {
                    "id": "easing",
                    "title": "Easing",
                    "type": "easing",
                    "value": "linear"
                },
                {
                    "id": "_overriders",
                    "type": "overriders",
                    "value": [
                        [
                            "duration",
                            60000
                        ]
                    ]
                }
            ]
        },
        {
            "name": "stepper",
            "title": "Stepper Effect",
            "description": "Define different steps (colors) over the time",
            "properties": [
                {
                    "id": "smooth",
                    "title": "Smooth",
                    "description": "Fade from one step to the following step",
                    "value": true,
                    "type": "boolean"
                },
                {
                    "id": "steps",
                    "title": "Steps",
                    "description": "Defined steps",
                    "value": [
                        [
                            0,
                            255,
                            0,
                            0,
                            "linear"
                        ],
                        [
                            1000,
                            255,
                            255,
                            0,
                            "linear"
                        ]
                    ],
                    "type": "steps"
                },
                {
                    "id": "_overriders",
                    "type": "overriders",
                    "value": [
                        [
                            "duration",
                            2000
                        ]
                    ]
                }
            ]
        },
        {
            "name": "candle",
            "title": "Candlelight Effect",
            "description": "Simulate a candle light effect",
            "properties": [
                {
                    "id": "color",
                    "title": "Color basis",
                    "description": "Light color",
                    "type": "color",
                    "value": [
                        223,
                        156,
                        0
                    ]
                },
                {
                    "id": "maxBrightnessChange",
                    "title": "Brightness variability %",
                    "description": "How much a color can vary from the base color (%)",
                    "value": 20,
                    "type": "integer",
                    "min": 0,
                    "max": 100,
                    "step": 1
                }
            ]
        },
        {
            "name": "rainbow",
            "title": "Rainbow Effect",
            "description": "A fixed or animated rainbow effect",
            "properties": [
                {
                    "id": "animated",
                    "title": "Animated",
                    "description": "Should the rainbow move along the time",
                    "value": true,
                    "type": "boolean"
                },
                {
                    "id": "angleCover",
                    "title": "Angle covered (°)",
                    "description": "360 to have a whole rainbow on the strip",
                    "type": "integer",
                    "value": 360,
                    "min": 0,
                    "max": 360,
                    "step": 1,
                    "relevant": [
                        [
                            [
                                "setAll",
                                false
                            ]
                        ]
                    ]
                },
                {
                    "id": "offsetAngle",
                    "title": "Angle offset (°)",
                    "description": "From which angle to begin the rainbow",
                    "type": "integer",
                    "value": 0,
                    "min": 0,
                    "max": 360,
                    "step": 1
                },
                {
                    "id": "setAll",
                    "title": "Set All LEDs",
                    "description": "All LEDs will have the same color at the same time",
                    "type": "boolean",
                    "value": false
                },
                {
                    "id": "stepTime",
                    "title": "Cycle time",
                    "description": "Time to run over a whole rainbow (ms)",
                    "type": "integer",
                    "value": 5000,
                    "min": 0,
                    "step": 1
                },
                {
                    "id": "easing",
                    "title": "Easing",
                    "value": "linear",
                    "type": "easing"
                }
            ]
        },
        {
            "name": "breath",
            "title": "Breath Effect",
            "description": "Simulates expiration/inspiration cycles.",
            "properties": [
                {
                    "id": "easing",
                    "title": "Easing",
                    "value": "linear",
                    "type": "easing"
                },
                {
                    "id": "basecolor",
                    "title": "Color basis",
                    "description": "Color theme",
                    "type": "color",
                    "value": [
                        230,
                        80,
                        0
                    ]
                },
                {
                    "id": "inspiration_ratio",
                    "title": "Inspiration %",
                    "description": "How much time the inspiration takes (expiration will last the remaining time)",
                    "type": "integer",
                    "min": "0",
                    "max": "100",
                    "value": 57
                },
                {
                    "id": "stepTime",
                    "title": "Cycle time",
                    "description": "Time of an inspiration + expiration cycle (ms)",
                    "type": "integer",
                    "value": 5000,
                    "min": 0,
                    "step": 1
                }
            ]
        },
        {
            "name": "audio",
            "title": "Sound React",
            "description": "Follows the sound in various ways.",
            "properties": [
                {
                    "id": "linear",
                    "title": "Linear morph",
                    "description": "Develops the effect on a line like an equalizer track",
                    "value": false,
                    "type": "boolean"
                },
                {
                    "id": "advanced",
                    "title": "Advanced mode",
                    "description": "Allow creating different color slices for different powers",
                    "value": false,
                    "type": "boolean"
                },
                {
                    "id": "smooth",
                    "title": "Smooth",
                    "description": "Fade from one slice to the other",
                    "value": false,
                    "type": "boolean",
                    "relevant": [
                        [
                            [
                                "linear",
                                true
                            ],
                            [
                                "advanced",
                                true
                            ]
                        ]
                    ]
                },
                {
                    "id": "frequency-band",
                    "description": "To which frequencies reacting",
                    "title": "Based on",
                    "value": "",
                    "type": "frequency-band"
                },
                {
                    "id": "slices",
                    "description": "Power:Color slices",
                    "title": "Slices",
                    "value": [
                        [
                            10,
                            0,
                            10
                        ],
                        [
                            255,
                            0,
                            255
                        ]
                    ],
                    "type": "slices"
                },
                {
                    "id": "direction",
                    "title": "Direction",
                    "type": "direction",
                    "value": "normal",
                    "relevant": [
                        [
                            [
                                "linear",
                                true
                            ]
                        ]
                    ]
                },
                {
                    "id": "_unique",
                    "title": "Unique",
                    "value": true,
                    "type": "unique"
                }
            ]
        },
        {
            "name": "bouncing_ball",
            "title": "Bouncing Ball Effect",
            "description": "Simulates one or more bouncing balls",
            "properties": [
                {
                    "id": "ballCount",
                    "description": "How many balls",
                    "title": "Ball Count",
                    "value": 1,
                    "type": "integer",
                    "min": 0
                },
                {
                    "id": "color",
                    "title": "Color basis",
                    "description": "Balls color",
                    "type": "color",
                    "value": [
                        223,
                        156,
                        0
                    ],
                    "relevant": [
                        [
                            [
                                "randomColors",
                                false
                            ]
                        ]
                    ]
                },
                {
                    "id": "startHeight",
                    "title": "Start height %",
                    "description": "From which percent height to launch the ball",
                    "value": 100,
                    "type": "integer",
                    "min": 1,
                    "max": 100
                },
                {
                    "id": "dampening",
                    "title": "Dampening %",
                    "description": "Power absorption at each bound",
                    "value": 10,
                    "type": "integer",
                    "min": 1,
                    "max": 99
                },
                {
                    "id": "gravity",
                    "title": "Gravity",
                    "value": -9.81,
                    "type": "integer",
                    "max": -1
                },
                {
                    "id": "trails",
                    "title": "Trails",
                    "description": "Should a trail follow ball(s)",
                    "value": true,
                    "type": "boolean"
                },
                {
                    "id": "trailsLength",
                    "title": "Trails Length",
                    "value": 11,
                    "type": "integer",
                    "min": 0,
                    "relevant": [
                        [
                            [
                                "trails",
                                true
                            ]
                        ]
                    ]
                },
                {
                    "id": "randomColors",
                    "title": "Random colors",
                    "description": "Should each ball have a random color",
                    "value": false,
                    "type": "boolean"
                },
                {
                    "id": "direction",
                    "title": "Direction",
                    "type": "direction",
                    "value": "normal"
                }
            ]
        },
        {
            "name": "knight_rider",
            "title": "Knight Rider",
            "description": "Simulates the Knight Rider movie car light effect",
            "properties": [
                {
                    "id": "scannerWidth",
                    "title": "Scanner width",
                    "description": "Size of the moving scanner",
                    "value": 10,
                    "type": "integer",
                    "min": 1
                },
                {
                    "id": "baseColor",
                    "title": "Color basis",
                    "description": "Color theme",
                    "type": "color",
                    "value": [
                        255,
                        0,
                        0
                    ]
                },
                {
                    "id": "stepTime",
                    "title": "Cycle time",
                    "description": "Time of a round trip (ms)",
                    "type": "integer",
                    "value": 1500,
                    "min": 0,
                    "step": 1
                },
                {
                    "id": "breakTime",
                    "title": "Break time",
                    "description": "Time to wait when the scanner hits an extremity (ms)",
                    "value": 0,
                    "type": "integer",
                    "min": 0
                },
                {
                    "id": "easing",
                    "title": "Easing",
                    "type": "easing",
                    "value": "linear"
                }
            ]
        },
        {
            "name": "twinkle",
            "title": "Twinkle",
            "description": "Twinkle",
            "properties": [
                {
                    "id": "randomColors",
                    "title": "Random colors",
                    "description": "Set a random color to each LED",
                    "type": "boolean",
                    "value": false
                },
                {
                    "id": "baseColor",
                    "title": "Base color",
                    "description": "Color theme",
                    "value": [255, 0, 0],
                    "type": "color",
                    "min": 0,
                    "relevant": [
                        [
                            [
                                "randomColors",
                                false
                            ]
                        ]
                    ]
                },
                {
                    "id": "stepTime",
                    "title": "Step time",
                    "description": "Duration of a twinkle cycle (ms)",
                    "value": 3000,
                    "type": "integer",
                    "min": 0
                },
                {
                    "id": "stepsCount",
                    "title": "Steps count",
                    "description": "How many steps to reach the end of twinkle cycle",
                    "value": 10,
                    "type": "integer",
                    "min": 1
                },
                {
                    "id": "minEnabledPercent",
                    "title": "Min ON %",
                    "description": "Minimum percent of LEDs to light on",
                    "value": 15,
                    "type": "integer",
                    "min": 0,
                    "max": 100
                },
                {
                    "id": "maxEnabledPercent",
                    "title": "Max ON %",
                    "description": "Maximum percent of LEDs to light on",
                    "value": 60,
                    "type": "integer",
                    "min": 0,
                    "max": 100
                },
                {
                    "id": "easing",
                    "title": "Easing",
                    "type": "easing",
                    "value": "linear"
                }
            ]
        },
        {
            "name": "sparkle",
            "title": "Sparkle",
            "description": "Sparkle",
            "properties": [
                {
                    "id": "randomColors",
                    "title": "Random colors",
                    "description": "Each sparking LED will have a random color",
                    "type": "boolean",
                    "value": false
                },
                {
                    "id": "baseColor",
                    "title": "Base color",
                    "description": "Color theme",
                    "value": [255, 255, 230],
                    "type": "color",
                    "min": 0,
                    "relevant": [
                        [
                            [
                                "randomColors",
                                false
                            ]
                        ]
                    ]
                },
                {
                    "id": "minEnabledPercent",
                    "title": "Min ON %",
                    "description": "Minimum percent of LEDs to light on",
                    "value": 15,
                    "type": "integer",
                    "min": 0,
                    "max": 100
                },
                {
                    "id": "maxEnabledPercent",
                    "title": "Max ON %",
                    "description": "Maximum percent of LEDs to light on",
                    "value": 60,
                    "type": "integer",
                    "min": 0,
                    "max": 100
                },
                {
                    "id": "stepTime",
                    "title": "Step time",
                    "value": 50,
                    "type": "integer",
                    "min": 0
                }
            ]
        },
        {
            "name": "moving_waves",
            "title": "Moving Waves",
            "description": "Moving Waves",
            "properties": [
                {
                    "id": "baseColor",
                    "title": "Base color",
                    "description": "Color theme",
                    "value": [0, 255, 0],
                    "type": "color",
                    "min": 0
                },
                {
                    "id": "waveSize",
                    "title": "Wave Size",
                    "description": "Count of LEDs compounding a wave",
                    "value": 20,
                    "type": "integer",
                    "min": 0
                },
                {
                    "id": "stepTime",
                    "title": "Step Time",
                    "description": "To adjust the speed of the movement (ms)",
                    "value": 50,
                    "type": "integer",
                    "min": 0
                },
                {
                    "id": "forceSmooth",
                    "title": "Force smooth",
                    "description": "Set a wave size that will make waves to move smoothly regarding the total count",
                    "type": "boolean",
                    "value": false
                },
                {
                    "id": "direction",
                    "title": "Direction",
                    "type": "direction",
                    "value": "normal"
                },
            ]
        },
        {
            "name": "color_wipe",
            "title": "Color Wipe",
            "description": "Color Wipe",
            "properties": [
                {
                    "id": "stepTime",
                    "title": "Step Time",
                    "description": "To adjust the speed of the movement (ms)",
                    "value": 50,
                    "type": "integer",
                    "min": 0
                },
                {
                    "id": "colors",
                    "title": "Colors",
                    "description": "Colors to unroll",
                    "value": [
                        [0, 0, 0],
                        [0, 0, 255],
                        [255, 0, 0],
                        [0, 255, 0],
                        [255, 255, 0]
                    ],
                    "type": "color-set"
                },
                {
                    "id": "direction",
                    "title": "Direction",
                    "type": "direction",
                    "value": "normal"
                }
            ]
        },
        {
            "name": "theater_chase",
            "title": "Theater Chase",
            "description": "Simulates theaters posters and stairs lights",
            "properties": [
                {
                    "id": "baseColor",
                    "title": "Base color",
                    "description": "Color theme",
                    "type": "color",
                    "value": [
                        255,
                        0,
                        0
                    ],
                    "relevant": [
                        [
                            [
                                "rainbow",
                                false
                            ]
                        ]
                    ]
                },
                {
                    "id": "stepTime",
                    "title": "Step Time",
                    "description": "To adjust the speed of the movement (ms)",
                    "value": 100,
                    "type": "integer",
                    "min": 0
                },
                {
                    "id": "space",
                    "title": "Space",
                    "description": "Space between 2 powered ON LEDs",
                    "value": 4,
                    "type": "integer",
                    "min": 0
                },
                {
                    "id": "rainbow",
                    "title": "Rainbow",
                    "description": "Unroll a rainbow on powered ON LEDs",
                    "type": "boolean",
                    "value": false
                }, ,
                {
                    "id": "forceSmooth",
                    "title": "Force smooth",
                    "description": "Try to find a space that makes the LEDs to smoothly run over the extremes",
                    "type": "boolean",
                    "value": false
                },
                {
                    "id": "direction",
                    "title": "Direction",
                    "type": "direction",
                    "value": "normal"
                }
            ]
        },
        {
            "name": "fire",
            "title": "Fire Effect",
            "description": "A flame emitter with various controls",
            "properties": [
                {
                    "id": "cooling",
                    "title": "Cooling",
                    "description": "Attenuates the flame",
                    "type": "integer",
                    "value": 55,
                    "min": 0,
                    "max": 100,
                },
                {
                    "id": "sparking",
                    "title": "Sparking",
                    "description": "Increase to add fuel",
                    "type": "integer",
                    "value": 120,
                    "min": 0,
                    "max": 100,
                },
                {
                    "id": "stepTime",
                    "title": "Step Time",
                    "description": "To adjust the speed of the movement (ms)",
                    "value": 15,
                    "type": "integer",
                    "min": 1
                },
                {
                    "id": "bothSides",
                    "title": "Both sides",
                    "description": "Create a second emitter at the end of the strip",
                    "type": "boolean",
                    "value": false
                },
                {
                    "id": "direction",
                    "title": "Direction",
                    "type": "direction",
                    "value": "normal"
                }
            ]
        }
    ]
};


/***/ })
/******/ ])["default"];
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,